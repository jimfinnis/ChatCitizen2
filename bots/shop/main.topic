:hourscheck
    # Writes a message to the output saying "we're closed" and
    # returns 1 if we should abandon the function. Lots of things
    # call this.
    `todstring mctime ?@hours in if
        0
    else
        ^notopen. 1
    then
;

# function to output what I buy

:ibuy
    ?@thingsibuy isnone if
        ["I don't buy anything.", "I'm afraid I don't buy anything",
        "I buy nothing."] choose
    else    
        "I buy "

        # build a list of the keys, each converted to
        # an English plural form (the keys are material names).
        # The [] item, item, item... way of forming a list is a nice
        # side-effect of how lists work in Action Language, and is carried
        # over from my Angort language.
        
        [] ?@thingsibuy keys each loop
            # this function is in root/mats.conf
            i getPluralMatName,
        endloop
        # and turn that list into a comma-separated list terminated with
        # an "and". This function is in root/utils.conf.
        listendwithand+
    then
    clean
;

+test
    [?@thingsisell,?@thingsibuy,?@exchange,?buyingItem] "," join.
    [?@thingsisell type,?@thingsibuy type,?@exchange type,?buyingItem type] "," join.
;

# function to output what I sell. See the ibuy function above for 
# how it works.

:isell
    ?@thingsisell isnone if
        ["I don't sell anything.", "Sorry, nothing is for sale.",
        "I sell nothing."] choose
    else    
        "I sell "
        [] ?@thingsisell keys each loop
            i getPluralMatName,
        endloop listendwithand+
    then
    clean
;

# and a function to tell the user what my "medium of exchange" is,
# i.e. what I use as cash.

:exch |:t|
    ?@exchange isnone if "I have no medium of exchange because I don't trade." else
        ?@exchange getPluralMatName !t
        ["my medium of exchange is ${?t}",
        "I use ${?t} as cash",
        "I accept payment in ${?t}",
        "I use ${?t} instead of cash"] choose
    then
;
    
+(.* what .* you [sale sell]) isell;
+(.* what .* you buy) ibuy;
+(.* what .* i [sale sell]) ibuy;
+(.* what .* i buy) isell;

# function to just print everything about me. It's used in
# the catchall topic.

:describe
    hourscheck if stop then
    isell ibuy+ exch+ clean
 ;

# show the cost of item named in m

:showcost |m:mat|
    hourscheck if stop then
    
    # quick check for a null give map (i.e. we haven't set it,
    # and so don't sell anything)
    ?@thingsisell isnone if
        ["I don't sell that. In fact, I don't sell anything.",
        "I don't sell anything!"] choose.
    stop then
        

    ?m matname !mat
    ?mat isnone if "I dont know what ${?m addarticle} is." stop then
    ?mat ?@thingsisell in if
        "I sell one of those for "
        ?mat ?@thingsisell get ?@exchange getMaterialNameAndNumber +
        clean.
    else
        ^dontsell.
    then
;

# show all my prices for what I sell

:prices
    hourscheck if stop then

    # quick check for a null give map (i.e. we haven't set it,
    # and so don't sell anything)
    ?@thingsisell isnone if isell stop then

    ?@thingsisell keys each loop 
        i!i # because string embedding doesn't work with iterators
        "${?i getSingularMatName addarticle} "
        "costs ${?i ?@thingsisell get ?@exchange getMaterialNameAndNumber}"+
        clean.
        " ".
    endloop
;

# function to show the values of what I buy, how many exchange items
# I will give for them.

:values |:ct|
    hourscheck if stop then
    
    # quick check for a null take map (i.e. we haven't set it,
    # and so don't buy anything)
    ?@thingsibuy isnone if ibuy stop then
    
    []
    ?@thingsibuy keys each loop 
        i ?@thingsibuy get !ct
        ?ct i getMaterialNameAndNumber,
    endloop
    listendwithor.

    # ct will have the cardinality of the last (or only) item

    ?@thingsibuy len 1 = if
        [" will get you one ", 
         ?ct 1 > if " are " else " is " then
         "worth one "+]
    else
        [" will each get you one ", 
        "are each worth one "]
    then
    choose .
    ?@exchange getSingularMatName.
    out clean
;

:showvalue |m:mat|
    hourscheck if stop then
    ?@thingsibuy isnone if
        ["I don't buy that. In fact, I don't buy anything.",
        "I don't buy anything!"] choose.
    stop then
    ?m matname !mat
    ?mat isnone if "I dont know what ${?m addarticle} is." stop then
    ?mat ?@thingsibuy in if
        ?mat ?@thingsibuy get englishnum
        " of those will get you a " +
        ?@exchange getSingularMatName+
        clean.
    else
        ^dontbuy.
    then
;   


# try to set m as the item the user is buying, checking we
# actually sell it. The variable m holds a material category
# (see mats.conf in root)

:attemptsetbuy |m:price|
#    "ASB" dp
    hourscheck if stop then
    
    ?@thingsisell isnone if isell stop then
        
    # first turn the string we got into a subcategory of ~material
    # (which we know it must be, as it's in ~material)
    ?m ~material subcat !m
    # then get the price, and check we actually sell these.
        
    ?m ?@thingsisell get !price
    ?price isnone if
        ^dontsell .
    else
        "You are buying ".
        ?m !buyingItem # set the conversation variable
        ?m getPluralMatName.
    then
    out clean
;

# this is called when the user says they want to buy something
# but not what. It triggers a little conversation.

:buywhat
    {
        +[something anything] "Please tell me what!" holdnext;
        +$c=~material $c attemptsetbuy;
        +(what .+) prices;
        +(.* buy $c=~material) $c attemptsetbuy;
        +(.* you .* buy) ibuy;
        +(.*) ^dontsell;
    } next
;

# patterns for setting what to buy.

+/b1 (.* buy ?some ?[a an] $c=~material .*) $c attemptsetbuy;
+/b2 (.* buy .+) "That's not a thing I know about.". ;
+/b3 (.* buy) "Yes, we've established that. But what?". buywhat;
    

+(how much .* give .*) values;
+(what .* give .*) values;
+(how much do .*) prices;
+(cost ?of ?[a an] $n=.*) $n showcost;
+(how much is ?[a an] $n=.*) $n showcost;
+(what does ?[a an] $n=.* cost) $n showcost;
+(how much for ?[a an] $n=.*) $n showvalue;
+(?what ?is ?the value ?of ?[a an] $n=.*) $n showvalue;
+(how much .*) prices;
+(?what ?are ?your prices) prices;
+(?what ?are ?your values) values;

# here we just matched a raw material name.

+($c=~material .*)
    $c attemptsetbuy;        

