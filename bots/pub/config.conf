inherit serviceprovider

# put the parent substitutions first (and only) in the subst sequence

subs parent

~spirit = [whisky whiskey vodka gin bourbon scotch]
~beer = [ale beer lager stout]
~wine = [red_wine white_wine]
~drink = [~spirit ~beer ~wine]
~genericdrink = [drink spirit strong weak nice glass pint booze]

global
    10000 double !@HalfLife # alcohol halflife in ticks
    ~drink cat2list !@DrinksList
    -1!@timerjokestep

    
;

# Greeting

^prehonorific = [hello hi hello_there hi_there wotcher greetings tod]

:greetedrecently
    ?greettime isnone if 0 else
    now ?greettime - 100 < then
;

:greet
    now !greettime
    ^prehonorific dup `tod = if
        drop `todstring mctime :[%
            `morning "Good morning",
            `evening "Good evening",
            `afternoon "Good afternoon",
            `night "Good evening"]; get
        then ","+
        honor+
;

^likedrink = ["Would you like a drink"
    "Would you like something to drink"
    "Would you like something"
    "Fancy a drink"]

^nodrinkplease = [ok suit_yourself fair_enough "Then why are you here?"
    "No problem" "Well, you know where I am"]
    
^whatwouldyoulike = [
    "What would you like",
    what_sort what_kind what_kind_of_drink
    any_particular_kind
]

^unknowndrink = ["Never heard of it." "I have no idea what that is.
    "That's a new one on me." "Oh, a wise guy, eh?"
    "Can't you order something I've heard of?"
    "Eh?"]
    
^yourehammered = [
"You've had far too much." "Look at the state of you." "You're completely wasted." "Go sleep it off, yeah?" "I think you've had enough."
"You're a right mess." "You can hardly stand." "You're absolutely hammered." "You've had quite enough, I think."
]

^refusedrink =
["No way am I serving you." "I'm not serving you." "You've had far too much." "You're not having anything else, you're completely wasted."
    "Please go home. Or anywhere." "You've had too much already." "I'm not giving you any more drink." "No more drink for you."]
    
^beatsme = ["Excuse me?"
"Absolutely."
"Really?"
"Whatever you say."
"Right."
"I like listening to you."
"Well, this is nice."
"You're good fun, you are."]

^yourewelcome = ["Enjoy!" "You're welcome." "No problem."]

^nodrinkwanted = ["Suit yourself.","Let me know if you change your mind.",
            "No problem.","OK."]

^agree = [right sure "I'm glad you agree"]
^disagree = [whatever hmm sure "I wouldn't go so far"]

&foodpat = (.* [eat food] .*)

# tell a joke and handle the responses
# This is a standard "A / I don't know / B" joke.

:dontknowjoke |feed,response:|
    ?feed
    # this is ugly; we have to put it into an instance variable
    # so the subpattern can see it.x
    ?response !@response 
    {
        +(.* know) ?@response;
        +&no ?@response;
        +(.* idea) ?@response;
        +(.* clue) ?@response;
    } next;

# this sort of joke sets up a timer.

:timerjoketick
    ?@timerjokestep ?@timerjokelist len < if
        ?@timerjokestep ?@timerjokelist get utter
        ?@timerjokestep 1 + !@timerjokestep
    else
        -1 !@timerjokestep
        ?@timerjokeID removetimer
    then
;
    
    

:timerjoke |list:|
    ?@timerjokestep 0 < if # can't do more than one!
        ?list !@timerjokelist
        0 !@timerjokestep
        2 "timerjoketick" addtimer !@timerjokeID
    then
;

# tell a joke!

:testjoke
    :["My dog's got no nose","How does he smell?","Terrible."];
    timerjoke;



topics {core_top}
topics {main me servicemain core_reductions core_main}
topics {catchall}
topics {core_catchall}
